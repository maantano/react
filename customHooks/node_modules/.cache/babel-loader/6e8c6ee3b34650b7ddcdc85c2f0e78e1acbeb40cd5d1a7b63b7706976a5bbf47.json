{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  };\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\nexport default useHttp;\n// import { useState } from \"react\";\n\n// const useHttp = (type) => {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [tasks, setTasks] = useState([]);\n//   const URI = `https://customhook-d4e12-default-rtdb.firebaseio.com/tasks.json`;\n//   if (type === \"POST\") {\n//     const enterTaskHandler = async (taskText) => {\n//       setIsLoading(true);\n//       setError(null);\n//       try {\n//         const response = await fetch(\n// \t\t\tURI,\n//           {\n//             method: \"POST\",\n//             body: JSON.stringify({ text: taskText }),\n//             headers: {\n//               \"Content-Type\": \"application/json\",\n//             },\n//           }\n//         );\n\n//         if (!response.ok) {\n//           throw new Error(\"Request failed!\");\n//         }\n\n//         const data = await response.json();\n\n//         const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n//         const createdTask = { id: generatedId, text: taskText };\n\n//         props.onAddTask(createdTask);\n//       } catch (err) {\n//         setError(err.message || \"Something went wrong!\");\n//       }\n//       setIsLoading(false);\n//     };\n//   } else if (type === \"GET\") {\n//     const fetchTasks = async (taskText) => {\n//       setIsLoading(true);\n//       setError(null);\n//       try {\n//         const response = await fetch(\n// \t\t\tURI\n//         );\n\n//         if (!response.ok) {\n//           throw new Error(\"Request failed!\");\n//         }\n\n//         const data = await response.json();\n\n//         const loadedTasks = [];\n\n//         for (const taskKey in data) {\n//           loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//         }\n\n//         setTasks(loadedTasks);\n//       } catch (err) {\n//         setError(err.message || \"Something went wrong!\");\n//       }\n//       setIsLoading(false);\n//     };\n//   }\n// };\n// export default useTask;","map":{"version":3,"names":["useState","useHttp","requestConfig","applyData","_s","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"sources":["/Users/mingyeong-eon/Downloads/react/customHooks/src/hooks/use-http.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst useHttp = (requestConfig, applyData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n    setIsLoading(false);\n  };\n  return {\n    isLoading,\n    error,\n    sendRequest,\n  };\n};\nexport default useHttp;\n// import { useState } from \"react\";\n\n// const useHttp = (type) => {\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [tasks, setTasks] = useState([]);\n//   const URI = `https://customhook-d4e12-default-rtdb.firebaseio.com/tasks.json`;\n//   if (type === \"POST\") {\n//     const enterTaskHandler = async (taskText) => {\n//       setIsLoading(true);\n//       setError(null);\n//       try {\n//         const response = await fetch(\n// \t\t\tURI,\n//           {\n//             method: \"POST\",\n//             body: JSON.stringify({ text: taskText }),\n//             headers: {\n//               \"Content-Type\": \"application/json\",\n//             },\n//           }\n//         );\n\n//         if (!response.ok) {\n//           throw new Error(\"Request failed!\");\n//         }\n\n//         const data = await response.json();\n\n//         const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n//         const createdTask = { id: generatedId, text: taskText };\n\n//         props.onAddTask(createdTask);\n//       } catch (err) {\n//         setError(err.message || \"Something went wrong!\");\n//       }\n//       setIsLoading(false);\n//     };\n//   } else if (type === \"GET\") {\n//     const fetchTasks = async (taskText) => {\n//       setIsLoading(true);\n//       setError(null);\n//       try {\n//         const response = await fetch(\n// \t\t\tURI\n//         );\n\n//         if (!response.ok) {\n//           throw new Error(\"Request failed!\");\n//         }\n\n//         const data = await response.json();\n\n//         const loadedTasks = [];\n\n//         for (const taskKey in data) {\n//           loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//         }\n\n//         setTasks(loadedTasks);\n//       } catch (err) {\n//         setError(err.message || \"Something went wrong!\");\n//       }\n//       setIsLoading(false);\n//     };\n//   }\n// };\n// export default useTask;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAGA,CAACC,aAAa,EAAEC,SAAS,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BH,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACT,aAAa,CAACU,GAAG,EAAE;QAC9CC,MAAM,EAAEX,aAAa,CAACW,MAAM,GAAGX,aAAa,CAACW,MAAM,GAAG,KAAK;QAC3DC,OAAO,EAAEZ,aAAa,CAACY,OAAO,GAAGZ,aAAa,CAACY,OAAO,GAAG,CAAC,CAAC;QAC3DC,IAAI,EAAEb,aAAa,CAACa,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACf,aAAa,CAACa,IAAI,CAAC,GAAG;MAClE,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAElClB,SAAS,CAACiB,IAAI,CAAC;IACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;IAClD;IACAjB,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EACD,OAAO;IACLD,SAAS;IACTE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CA/BIH,OAAO;AAgCb,eAAeA,OAAO;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}