{"ast":null,"code":"var _jsxFileName = \"/Users/mingyeong-eon/Downloads/01-starting-project 3/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext, { AuthContextProvider } from \"./store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const ctx = useContext(AuthContext);\n  return /*#__PURE__*/_jsxDEV(AuthContextProvider, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 31\n        }, this), ctx.isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\n_c = App;\nexport default App;\n\n// 아래는 기본 형 위에는 Context 사용\n\n// import React, { useEffect, useState } from \"react\";\n\n// import Login from \"./components/Login/Login\";\n// import Home from \"./components/Home/Home\";\n// import MainHeader from \"./components/MainHeader/MainHeader\";\n// import AuthContext from \"./store/auth-context\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   useEffect(() => {\n//     const storedUserLoggeedInInoformation = localStorage.getItem(\"isLoggedIn\");\n\n//     if (storedUserLoggeedInInoformation) {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   const loginHandler = (email, password) => {\n//     localStorage.setItem(\"isLoggedIn\", 1);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logoutHandler = () => {\n//     setIsLoggedIn(false);\n//     localStorage.removeItem(\"isLoggedIn\");\n//   };\n\n//   return (\n//     // <React.Fragment> // AuthContext가 Root 컴포넌트 역할을 하기 때문에 React.Fragment or <>는 감싸지 않아도 된다.\n//     // 컨텍스트에 기본값이 있으면 사실은 Provider가 필요가 없다. Provider 와 Consumer가 충돌이 발생한다.\n//     <AuthContext.Provider\n//       value={{\n//         isLoggedIn: isLoggedIn,\n//         onLogout: logoutHandler,\n//       }}\n//     >\n//       {/* 컨텍스트 사용해서 props를 넘겨주지 않아도 된다. */}\n//       {/* <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} /> */}\n//       <MainHeader />\n//       {/* 핸들러 함수도 context에 담아서 사용한다. */}\n//       {/* <MainHeader onLogout={logoutHandler} /> */}\n//       <main>\n//         {!isLoggedIn && <Login onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//     </AuthContext.Provider>\n//     // {/* </React.Fragment> */}\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Login","Home","MainHeader","AuthContext","AuthContextProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","ctx","children","fileName","_jsxFileName","lineNumber","columnNumber","isLoggedIn","_c","$RefreshReg$"],"sources":["/Users/mingyeong-eon/Downloads/01-starting-project 3/src/App.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext, { AuthContextProvider } from \"./store/auth-context\";\n\nfunction App() {\n  const ctx = useContext(AuthContext);\n  return (\n    <AuthContextProvider>\n      <>\n        <MainHeader />\n        <main>\n          {!ctx.isLoggedIn && <Login />}\n          {ctx.isLoggedIn && <Home />}\n        </main>\n      </>\n    </AuthContextProvider>\n  );\n}\n\nexport default App;\n\n// 아래는 기본 형 위에는 Context 사용\n\n// import React, { useEffect, useState } from \"react\";\n\n// import Login from \"./components/Login/Login\";\n// import Home from \"./components/Home/Home\";\n// import MainHeader from \"./components/MainHeader/MainHeader\";\n// import AuthContext from \"./store/auth-context\";\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   useEffect(() => {\n//     const storedUserLoggeedInInoformation = localStorage.getItem(\"isLoggedIn\");\n\n//     if (storedUserLoggeedInInoformation) {\n//       setIsLoggedIn(true);\n//     }\n//   }, []);\n\n//   const loginHandler = (email, password) => {\n//     localStorage.setItem(\"isLoggedIn\", 1);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logoutHandler = () => {\n//     setIsLoggedIn(false);\n//     localStorage.removeItem(\"isLoggedIn\");\n//   };\n\n//   return (\n//     // <React.Fragment> // AuthContext가 Root 컴포넌트 역할을 하기 때문에 React.Fragment or <>는 감싸지 않아도 된다.\n//     // 컨텍스트에 기본값이 있으면 사실은 Provider가 필요가 없다. Provider 와 Consumer가 충돌이 발생한다.\n//     <AuthContext.Provider\n//       value={{\n//         isLoggedIn: isLoggedIn,\n//         onLogout: logoutHandler,\n//       }}\n//     >\n//       {/* 컨텍스트 사용해서 props를 넘겨주지 않아도 된다. */}\n//       {/* <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} /> */}\n//       <MainHeader />\n//       {/* 핸들러 함수도 context에 담아서 사용한다. */}\n//       {/* <MainHeader onLogout={logoutHandler} /> */}\n//       <main>\n//         {!isLoggedIn && <Login onLogin={loginHandler} />}\n//         {isLoggedIn && <Home onLogout={logoutHandler} />}\n//       </main>\n//     </AuthContext.Provider>\n//     // {/* </React.Fragment> */}\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE9D,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,UAAU,MAAM,oCAAoC;AAC3D,OAAOC,WAAW,IAAIC,mBAAmB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,GAAG,GAAGd,UAAU,CAACM,WAAW,CAAC;EACnC,oBACEG,OAAA,CAACF,mBAAmB;IAAAQ,QAAA,eAClBN,OAAA,CAAAE,SAAA;MAAAI,QAAA,gBACEN,OAAA,CAACJ,UAAU;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACdV,OAAA;QAAAM,QAAA,GACG,CAACD,GAAG,CAACM,UAAU,iBAAIX,OAAA,CAACN,KAAK;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAC5BL,GAAG,CAACM,UAAU,iBAAIX,OAAA,CAACL,IAAI;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IAAA,eACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAE1B;AAACN,EAAA,CAbQD,GAAG;AAAAS,EAAA,GAAHT,GAAG;AAeZ,eAAeA,GAAG;;AAElB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}